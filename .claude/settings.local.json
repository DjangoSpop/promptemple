{
  "permissions": {
    "allow": [
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(curl:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Read(//mnt/c/Users/**)",
      "Bash(git commit -m \"$(cat <<''EOF''\nProduction-ready ASGI deployment: Fix Daphne, WebSockets, SSE & Celery\n\nâœ… Fixed ASGI configuration for Daphne deployment\n- Updated promptcraft.asgi to use production settings\n- Fixed AUTH_USER_MODEL format (users.User vs apps.users.User)\n- Added proper error handling for missing dependencies\n\nâœ… Enhanced production settings\n- Redis-first caching with graceful fallback to in-memory\n- Robust database configuration (PostgreSQL â†’ SQLite fallback)\n- Fixed channels layer configuration with proper imports\n- Production-ready security headers and CORS\n\nâœ… Updated Docker & Railway configuration\n- Dynamic PORT binding using $PORT:-8000\n- Fixed health check to use dynamic port\n- Added pre-deployment commands (migrate, collectstatic)\n- Production environment variables configuration\n\nâœ… Cleaned requirements.txt\n- Added missing djangorestframework-simplejwt\n- Removed duplicate/old requirement files\n- Added production dependencies (sentry-sdk, gunicorn)\n- Organized dependencies by category\n\nâœ… Fixed Celery configuration\n- Updated to use production settings module\n- Windows-compatible worker configuration\n- Proper task routing and retry policies\n\nâœ… WebSocket & SSE ready\n- Channels configured with Redis backend\n- WebSocket consumers for AI processing\n- SSE endpoints for streaming responses\n- Health check endpoints available\n\nðŸš€ Ready for Railway deployment with full WebSocket, SSE, and background task support!\n\nðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(cat:*)"
    ],
    "deny": [],
    "ask": []
  }
}