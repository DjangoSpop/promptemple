# Generated by Django 4.2.10 on 2025-08-24 19:27

from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("templates", "0005_remove_template_external_id_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_id", models.CharField(db_index=True, max_length=200)),
                (
                    "message_type",
                    models.CharField(db_index=True, default="user", max_length=50),
                ),
                ("content", models.TextField()),
                (
                    "original_content",
                    models.TextField(
                        blank=True, help_text="Original before optimization"
                    ),
                ),
                ("optimized_by_ai", models.BooleanField(default=False)),
                (
                    "optimization_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("suggested_prompts", models.JSONField(blank=True, default=list)),
                ("response_time_ms", models.IntegerField(blank=True, null=True)),
                ("tokens_used", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                "db_table": "chat_messages",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PerformanceMetrics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("operation_type", models.CharField(db_index=True, max_length=100)),
                (
                    "session_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=200, null=True
                    ),
                ),
                ("response_time_ms", models.IntegerField()),
                ("memory_usage_mb", models.FloatField(blank=True, null=True)),
                ("cpu_usage_percent", models.FloatField(blank=True, null=True)),
                ("request_size_bytes", models.IntegerField(blank=True, null=True)),
                ("response_size_bytes", models.IntegerField(blank=True, null=True)),
                ("success", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True)),
                ("endpoint", models.CharField(blank=True, max_length=200)),
                ("user_agent", models.CharField(blank=True, max_length=500)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                "db_table": "performance_metrics",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PromptLibrary",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(db_index=True, max_length=500)),
                ("content", models.TextField(help_text="Raw prompt content")),
                ("category", models.CharField(db_index=True, max_length=200)),
                (
                    "subcategory",
                    models.CharField(blank=True, db_index=True, max_length=200),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                (
                    "keywords",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Extracted keywords for search",
                    ),
                ),
                (
                    "intent_category",
                    models.CharField(blank=True, db_index=True, max_length=100),
                ),
                ("use_case", models.CharField(blank=True, max_length=200)),
                ("usage_count", models.IntegerField(db_index=True, default=0)),
                (
                    "success_rate",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "average_rating",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("ai_enhanced", models.BooleanField(default=False)),
                (
                    "complexity_score",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("estimated_tokens", models.IntegerField(default=0)),
                (
                    "search_vector",
                    django.contrib.postgres.search.SearchVectorField(
                        blank=True, null=True
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="Original source of prompt",
                        max_length=200,
                    ),
                ),
                ("author", models.CharField(blank=True, max_length=200)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("is_featured", models.BooleanField(db_index=True, default=False)),
                (
                    "quality_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "prompt_library",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserIntent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("session_id", models.CharField(db_index=True, max_length=200)),
                ("original_query", models.TextField(help_text="User's original query")),
                (
                    "processed_intent",
                    models.JSONField(
                        default=dict, help_text="LangChain processed intent"
                    ),
                ),
                ("intent_category", models.CharField(db_index=True, max_length=100)),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("context_data", models.JSONField(blank=True, default=dict)),
                ("conversation_history", models.JSONField(blank=True, default=list)),
                (
                    "status",
                    models.CharField(
                        db_index=True, default="processing", max_length=50
                    ),
                ),
                ("is_resolved", models.BooleanField(db_index=True, default=False)),
                ("processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="intents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_intents",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PromptOptimization",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("optimized_content", models.TextField()),
                ("optimization_type", models.CharField(db_index=True, max_length=100)),
                (
                    "improvements",
                    models.JSONField(
                        default=list, help_text="List of improvements made"
                    ),
                ),
                (
                    "similarity_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "relevance_score",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "user_satisfaction",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("times_used", models.IntegerField(default=0)),
                (
                    "success_rate",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("model_used", models.CharField(blank=True, max_length=100)),
                ("processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "original_prompt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="optimizations",
                        to="templates.promptlibrary",
                    ),
                ),
                (
                    "user_intent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="optimizations",
                        to="templates.userintent",
                    ),
                ),
            ],
            options={
                "db_table": "prompt_optimizations",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="promptlibrary",
            index=models.Index(
                fields=["category", "is_active"], name="prompt_libr_categor_9163fd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="promptlibrary",
            index=models.Index(
                fields=["intent_category", "usage_count"],
                name="prompt_libr_intent__3cc581_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="promptlibrary",
            index=models.Index(
                fields=["quality_score", "success_rate"],
                name="prompt_libr_quality_663cb4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="promptlibrary",
            index=models.Index(
                fields=["is_featured", "average_rating"],
                name="prompt_libr_is_feat_48ec02_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="promptlibrary",
            index=models.Index(
                fields=["complexity_score", "estimated_tokens"],
                name="prompt_libr_complex_ce680f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="promptlibrary",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="prompt_libr_search__dcde63_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="promptlibrary",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["tags"], name="prompt_libr_tags_e4f905_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="promptlibrary",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["keywords"], name="prompt_libr_keyword_0bfaa1_gin"
            ),
        ),
        migrations.AddIndex(
            model_name="performancemetrics",
            index=models.Index(
                fields=["operation_type", "timestamp"],
                name="performance_operati_f4bffd_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="performancemetrics",
            index=models.Index(
                fields=["response_time_ms", "success"],
                name="performance_respons_080074_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="performancemetrics",
            index=models.Index(
                fields=["session_id", "operation_type"],
                name="performance_session_af4b6c_idx",
            ),
        ),
        migrations.AddField(
            model_name="chatmessage",
            name="intent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="messages",
                to="templates.userintent",
            ),
        ),
        migrations.AddField(
            model_name="chatmessage",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="chat_messages",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="userintent",
            index=models.Index(
                fields=["session_id", "created_at"],
                name="user_intent_session_9d12d3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userintent",
            index=models.Index(
                fields=["user", "intent_category"],
                name="user_intent_user_id_6c0a20_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userintent",
            index=models.Index(
                fields=["status", "is_resolved"], name="user_intent_status_296476_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userintent",
            index=models.Index(
                fields=["confidence_score", "intent_category"],
                name="user_intent_confide_ec4aad_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="promptoptimization",
            index=models.Index(
                fields=["original_prompt", "optimization_type"],
                name="prompt_opti_origina_1b0ad0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="promptoptimization",
            index=models.Index(
                fields=["user_intent", "relevance_score"],
                name="prompt_opti_user_in_b2e276_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="promptoptimization",
            index=models.Index(
                fields=["similarity_score", "success_rate"],
                name="prompt_opti_similar_0a589c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="promptoptimization",
            index=models.Index(
                fields=["times_used", "user_satisfaction"],
                name="prompt_opti_times_u_b0cd61_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["session_id", "created_at"],
                name="chat_messag_session_597c4e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["user", "message_type"], name="chat_messag_user_id_fc8ba8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["intent", "optimized_by_ai"],
                name="chat_messag_intent__0f85a4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="chatmessage",
            index=models.Index(
                fields=["response_time_ms", "message_type"],
                name="chat_messag_respons_5d9b3d_idx",
            ),
        ),
    ]
