# Generated by Django 4.2.10 on 2025-06-20 13:02

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="PromptField",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Display label for the field", max_length=200
                    ),
                ),
                (
                    "placeholder",
                    models.CharField(
                        blank=True,
                        help_text="Placeholder text shown in input",
                        max_length=500,
                    ),
                ),
                (
                    "field_type",
                    models.CharField(
                        choices=[
                            ("text", "Text Input"),
                            ("textarea", "Text Area"),
                            ("dropdown", "Dropdown Select"),
                            ("checkbox", "Checkbox List"),
                            ("radio", "Radio Buttons"),
                            ("number", "Number Input"),
                        ],
                        default="text",
                        help_text="Type of input field to display",
                        max_length=20,
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=False, help_text="Whether this field is mandatory"
                    ),
                ),
                (
                    "default_value",
                    models.TextField(
                        blank=True, help_text="Default value for the field"
                    ),
                ),
                (
                    "validation_pattern",
                    models.CharField(
                        blank=True,
                        help_text="Regex pattern for validation",
                        max_length=500,
                    ),
                ),
                (
                    "help_text",
                    models.TextField(
                        blank=True, help_text="Additional help text for users"
                    ),
                ),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of options for choice fields",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order within template"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "prompt_fields",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="Template",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(help_text="Template title", max_length=200)),
                (
                    "description",
                    models.TextField(
                        help_text="Description of what this template does"
                    ),
                ),
                (
                    "template_content",
                    models.TextField(
                        help_text="Template content with {{placeholders}}"
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        default="1.0.0", help_text="Template version", max_length=20
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True, default=list, help_text="List of tags for searching"
                    ),
                ),
                (
                    "is_ai_generated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this template was generated by AI",
                    ),
                ),
                (
                    "ai_confidence",
                    models.FloatField(
                        default=0.0,
                        help_text="AI confidence score (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "extracted_keywords",
                    models.JSONField(
                        blank=True, default=list, help_text="AI-extracted keywords"
                    ),
                ),
                (
                    "smart_suggestions",
                    models.JSONField(
                        blank=True, default=dict, help_text="AI-generated suggestions"
                    ),
                ),
                (
                    "usage_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of times template was used",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "completion_rate",
                    models.FloatField(
                        default=0.0,
                        help_text="Rate of successful completions (0-1)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "average_rating",
                    models.FloatField(
                        default=0.0,
                        help_text="Average user rating (0-5 stars)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "popularity_score",
                    models.FloatField(
                        default=0.0,
                        help_text="Calculated popularity score",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True, help_text="Whether template is publicly visible"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="Whether template is featured"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether template is active"
                    ),
                ),
                (
                    "localizations",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Translations for different languages",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "templates",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TemplateBookmark",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "folder_name",
                    models.CharField(
                        blank=True,
                        help_text="Optional folder to organize bookmarks",
                        max_length=100,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Personal notes about this template",
                        max_length=500,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "template_bookmarks",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TemplateCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "icon",
                    models.CharField(
                        blank=True, help_text="Icon name for UI display", max_length=50
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6366F1",
                        help_text="Hex color code for category",
                        max_length=7,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order in lists"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Template Categories",
                "db_table": "template_categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="TemplateField",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
            ],
            options={
                "db_table": "template_fields",
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="TemplateRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveSmallIntegerField(
                        help_text="Rating from 1 to 5 stars",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "review",
                    models.TextField(
                        blank=True, help_text="Optional written review", max_length=1000
                    ),
                ),
                (
                    "ease_of_use",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="How easy was the template to use?",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "quality_of_output",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Quality of the generated prompt",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "design_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Template design and layout rating",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "would_recommend",
                    models.BooleanField(
                        blank=True,
                        help_text="Would you recommend this template to others?",
                        null=True,
                    ),
                ),
                (
                    "helpful_votes",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of users who found this review helpful",
                    ),
                ),
                (
                    "total_votes",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of helpfulness votes"
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this rating is from a verified template completion",
                    ),
                ),
                (
                    "is_flagged",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this review has been flagged for review",
                    ),
                ),
                (
                    "moderation_notes",
                    models.TextField(blank=True, help_text="Internal moderation notes"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "template_ratings",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TemplateUsage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("was_completed", models.BooleanField(default=False)),
                (
                    "time_spent_seconds",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time spent in seconds completing the template",
                        null=True,
                    ),
                ),
                (
                    "generated_prompt_length",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Length of the final generated prompt",
                        null=True,
                    ),
                ),
                (
                    "field_completion_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON data showing which fields were completed and their values",
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        blank=True,
                        help_text="Device type: mobile, tablet, desktop",
                        max_length=50,
                    ),
                ),
                (
                    "app_version",
                    models.CharField(
                        blank=True,
                        help_text="App version when template was used",
                        max_length=20,
                    ),
                ),
                (
                    "referrer_source",
                    models.CharField(
                        blank=True,
                        help_text="How user found this template",
                        max_length=100,
                    ),
                ),
                (
                    "user_satisfaction",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="User satisfaction rating (1-5) given after completion",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_logs",
                        to="templates.template",
                    ),
                ),
            ],
            options={
                "db_table": "template_usage",
                "ordering": ["-started_at"],
            },
        ),
    ]
