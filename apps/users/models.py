from django.db import models

# Create your models here.
from django.contrib.auth.models import AbstractUser
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
import uuid
import uuid

class User(AbstractUser):
    """
    Enhanced User model with gamification features
    
    Extends Django's built-in User model to add:
    - Gamification fields (credits, level, experience)
    - User preferences
    - Statistics tracking
    """
    
    # Use UUID as primary key to match existing database
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    
    # Fix reverse accessor conflicts
    groups = models.ManyToManyField(
        'auth.Group',
        verbose_name='groups',
        blank=True,
        help_text='The groups this user belongs to.',
        related_name='custom_user_set',
        related_query_name='custom_user',
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        verbose_name='user permissions',
        blank=True,
        help_text='Specific permissions for this user.',
        related_name='custom_user_set',
        related_query_name='custom_user',
    )
    
    # Profile information
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    bio = models.TextField(max_length=500, blank=True)
    
    # Gamification fields
    credits = models.IntegerField(
        default=100, 
        validators=[MinValueValidator(0)],
        help_text="User's available credits"
    )
    level = models.IntegerField(
        default=1, 
        validators=[MinValueValidator(1)],
        help_text="User's current level"
    )
    experience_points = models.IntegerField(
        default=0, 
        validators=[MinValueValidator(0)],
        help_text="Total experience points earned"
    )
    daily_streak = models.IntegerField(
        default=0, 
        validators=[MinValueValidator(0)],
        help_text="Current daily login streak"
    )
    last_login_date = models.DateField(
        null=True, 
        blank=True,
        help_text="Last date user logged in"
    )
    
    # User rank and status
    user_rank = models.CharField(
        max_length=50, 
        default='Prompt Novice',
        help_text="User's current rank title"
    )
    is_premium = models.BooleanField(
        default=False,
        help_text="Whether user has premium subscription"
    )
    premium_expires_at = models.DateTimeField(
        null=True, 
        blank=True,
        help_text="When premium subscription expires"
    )
    
    # User preferences
    theme_preference = models.CharField(
        max_length=20, 
        choices=[
            ('light', 'Light'), 
            ('dark', 'Dark'), 
            ('system', 'System')
        ],
        default='system',
        help_text="User's preferred theme"
    )
    language_preference = models.CharField(
        max_length=10, 
        default='en',
        help_text="User's preferred language code"
    )
    ai_assistance_enabled = models.BooleanField(
        default=True,
        help_text="Whether AI assistance is enabled"
    )
    analytics_enabled = models.BooleanField(
        default=True,
        help_text="Whether analytics tracking is enabled"
    )
    
    # Usage statistics
    templates_created = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0)],
        help_text="Total templates created by user"
    )
    templates_completed = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0)],
        help_text="Total templates completed by user"
    )
    total_prompts_generated = models.IntegerField(
        default=0,
        validators=[MinValueValidator(0)],
        help_text="Total prompts generated by user"
    )
    
    # Timestamps
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'users'
        indexes = [
            models.Index(fields=['level', 'experience_points']),
            models.Index(fields=['created_at']),
            models.Index(fields=['daily_streak']),
        ]
        
    def __str__(self):
        return self.username

    @property
    def completion_rate(self):
        """Calculate user's template completion rate"""
        if self.templates_created == 0:
            return 0
        return round((self.templates_completed / self.templates_created) * 100, 2)
    
    def can_afford(self, cost):
        """Check if user can afford a certain credit cost"""
        return self.credits >= cost
    
    def calculate_level(self):
        """Calculate user level based on experience points"""
        # Level calculation: every 100 XP = 1 level
        calculated_level = max(1, self.experience_points // 100 + 1)
        if calculated_level != self.level:
            self.level = calculated_level
            self.save(update_fields=['level'])
        return self.level