# Generated by Django 4.2.10 on 2025-06-20 13:02

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("bio", models.TextField(blank=True, max_length=500)),
                (
                    "credits",
                    models.IntegerField(
                        default=100,
                        help_text="User's available credits",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "level",
                    models.IntegerField(
                        default=1,
                        help_text="User's current level",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "experience_points",
                    models.IntegerField(
                        default=0,
                        help_text="Total experience points earned",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "daily_streak",
                    models.IntegerField(
                        default=0,
                        help_text="Current daily login streak",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "last_login_date",
                    models.DateField(
                        blank=True, help_text="Last date user logged in", null=True
                    ),
                ),
                (
                    "user_rank",
                    models.CharField(
                        default="Prompt Novice",
                        help_text="User's current rank title",
                        max_length=50,
                    ),
                ),
                (
                    "is_premium",
                    models.BooleanField(
                        default=False, help_text="Whether user has premium subscription"
                    ),
                ),
                (
                    "premium_expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When premium subscription expires",
                        null=True,
                    ),
                ),
                (
                    "theme_preference",
                    models.CharField(
                        choices=[
                            ("light", "Light"),
                            ("dark", "Dark"),
                            ("system", "System"),
                        ],
                        default="system",
                        help_text="User's preferred theme",
                        max_length=20,
                    ),
                ),
                (
                    "language_preference",
                    models.CharField(
                        default="en",
                        help_text="User's preferred language code",
                        max_length=10,
                    ),
                ),
                (
                    "ai_assistance_enabled",
                    models.BooleanField(
                        default=True, help_text="Whether AI assistance is enabled"
                    ),
                ),
                (
                    "analytics_enabled",
                    models.BooleanField(
                        default=True, help_text="Whether analytics tracking is enabled"
                    ),
                ),
                (
                    "templates_created",
                    models.IntegerField(
                        default=0,
                        help_text="Total templates created by user",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "templates_completed",
                    models.IntegerField(
                        default=0,
                        help_text="Total templates completed by user",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_prompts_generated",
                    models.IntegerField(
                        default=0,
                        help_text="Total prompts generated by user",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="custom_user_set",
                        related_query_name="custom_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="custom_user_set",
                        related_query_name="custom_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
                "indexes": [
                    models.Index(
                        fields=["level", "experience_points"],
                        name="users_level_b76a67_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="users_created_6541e9_idx"
                    ),
                    models.Index(
                        fields=["daily_streak"], name="users_daily_s_c6565e_idx"
                    ),
                ],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
