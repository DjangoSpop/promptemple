# Generated by Django 4.2.10 on 2025-06-20 13:02

import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AIInsight",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "insight_type",
                    models.CharField(
                        choices=[
                            ("optimization", "Optimization"),
                            ("suggestion", "Suggestion"),
                            ("warning", "Warning"),
                            ("recommendation", "Recommendation"),
                            ("analysis", "Analysis"),
                            ("enhancement", "Enhancement"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("template_quality", "Template Quality"),
                            ("user_experience", "User Experience"),
                            ("performance", "Performance"),
                            ("engagement", "Engagement"),
                            ("content", "Content"),
                            ("structure", "Structure"),
                        ],
                        max_length=50,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("detailed_analysis", models.TextField(blank=True)),
                (
                    "confidence",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                ("ai_model_used", models.CharField(blank=True, max_length=100)),
                ("processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("recommendations", models.JSONField(blank=True, default=list)),
                ("action_items", models.JSONField(blank=True, default=list)),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "estimated_impact",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("is_viewed", models.BooleanField(default=False)),
                ("is_accepted", models.BooleanField(default=False)),
                ("is_dismissed", models.BooleanField(default=False)),
                ("user_feedback", models.TextField(blank=True)),
                (
                    "user_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("applied_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "ai_insights",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AIInteraction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "interaction_type",
                    models.CharField(
                        choices=[
                            ("template_analysis", "Template Analysis"),
                            ("content_optimization", "Content Optimization"),
                            ("suggestion_generation", "Suggestion Generation"),
                            ("prompt_enhancement", "Prompt Enhancement"),
                            ("keyword_extraction", "Keyword Extraction"),
                            ("sentiment_analysis", "Sentiment Analysis"),
                            ("quality_assessment", "Quality Assessment"),
                            ("personalization", "Personalization"),
                        ],
                        max_length=50,
                    ),
                ),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("request_prompt", models.TextField()),
                ("request_metadata", models.JSONField(blank=True, default=dict)),
                ("response_content", models.TextField(blank=True)),
                ("response_metadata", models.JSONField(blank=True, default=dict)),
                ("tokens_input", models.IntegerField(default=0)),
                ("tokens_output", models.IntegerField(default=0)),
                ("response_time_ms", models.IntegerField(blank=True, null=True)),
                ("was_successful", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True)),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                (
                    "user_rating",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=10, null=True
                    ),
                ),
                ("related_object_type", models.CharField(blank=True, max_length=50)),
                ("related_object_id", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "ai_interactions",
            },
        ),
        migrations.CreateModel(
            name="AIModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("display_name", models.CharField(max_length=100)),
                ("max_context_length", models.IntegerField(default=4000)),
                (
                    "cost_per_input_token",
                    models.DecimalField(decimal_places=8, default=0.0, max_digits=10),
                ),
                (
                    "cost_per_output_token",
                    models.DecimalField(decimal_places=8, default=0.0, max_digits=10),
                ),
                ("response_time_avg_ms", models.IntegerField(default=2000)),
                (
                    "quality_score",
                    models.FloatField(
                        default=0.8,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "ai_models",
            },
        ),
        migrations.CreateModel(
            name="AIProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("display_name", models.CharField(max_length=100)),
                ("api_endpoint", models.URLField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("max_tokens", models.IntegerField(default=4000)),
                (
                    "cost_per_token",
                    models.DecimalField(decimal_places=8, default=0.0, max_digits=10),
                ),
                ("rate_limit_per_hour", models.IntegerField(default=100)),
                ("supports_text_analysis", models.BooleanField(default=True)),
                ("supports_content_generation", models.BooleanField(default=True)),
                ("supports_optimization", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "ai_providers",
            },
        ),
        migrations.CreateModel(
            name="AIUsageQuota",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("monthly_requests_limit", models.IntegerField(default=100)),
                ("monthly_tokens_limit", models.IntegerField(default=50000)),
                ("monthly_requests_used", models.IntegerField(default=0)),
                ("monthly_tokens_used", models.IntegerField(default=0)),
                ("daily_requests_limit", models.IntegerField(default=20)),
                ("daily_tokens_limit", models.IntegerField(default=5000)),
                ("daily_requests_used", models.IntegerField(default=0)),
                ("daily_tokens_used", models.IntegerField(default=0)),
                ("last_daily_reset", models.DateField(auto_now_add=True)),
                ("last_monthly_reset", models.DateField(auto_now_add=True)),
                ("has_premium_ai", models.BooleanField(default=False)),
                ("premium_expires_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "ai_usage_quotas",
            },
        ),
        migrations.CreateModel(
            name="PersonalizedRecommendation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "confidence",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                (
                    "relevance_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                (
                    "popularity_factor",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                ("reasoning", models.TextField()),
                ("recommendation_factors", models.JSONField(blank=True, default=list)),
                ("user_behavior_analysis", models.JSONField(blank=True, default=dict)),
                ("estimated_completion_time", models.IntegerField()),
                (
                    "predicted_success_rate",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        default="intermediate",
                        max_length=20,
                    ),
                ),
                (
                    "recommendation_context",
                    models.CharField(
                        choices=[
                            ("onboarding", "Onboarding"),
                            ("daily_use", "Daily Use"),
                            ("skill_building", "Skill Building"),
                            ("project_based", "Project Based"),
                            ("trending", "Trending"),
                        ],
                        default="daily_use",
                        max_length=50,
                    ),
                ),
                ("is_viewed", models.BooleanField(default=False)),
                ("is_accepted", models.BooleanField(default=False)),
                ("is_dismissed", models.BooleanField(default=False)),
                ("viewed_at", models.DateTimeField(blank=True, null=True)),
                ("interacted_at", models.DateTimeField(blank=True, null=True)),
                ("model_version", models.CharField(blank=True, max_length=50)),
                ("feature_weights", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
            ],
            options={
                "db_table": "personalized_recommendations",
                "ordering": ["-confidence", "-created_at"],
            },
        ),
    ]
