# Generated by Django 4.2.10 on 2025-06-20 13:02

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "icon",
                    models.CharField(
                        default="emoji_events",
                        help_text="Icon identifier for UI",
                        max_length=50,
                    ),
                ),
                (
                    "requirement_type",
                    models.CharField(
                        help_text="Type of requirement (templates_created, streak_days, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "requirement_value",
                    models.IntegerField(help_text="Target value to unlock achievement"),
                ),
                (
                    "requirement_description",
                    models.CharField(
                        blank=True,
                        help_text="Human-readable requirement description",
                        max_length=200,
                    ),
                ),
                (
                    "credits_reward",
                    models.IntegerField(
                        default=0,
                        help_text="Credits awarded for this achievement",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "experience_reward",
                    models.IntegerField(
                        default=0,
                        help_text="Experience points awarded",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        help_text="Achievement category for organization",
                        max_length=50,
                    ),
                ),
                (
                    "rarity",
                    models.CharField(
                        choices=[
                            ("common", "Common"),
                            ("uncommon", "Uncommon"),
                            ("rare", "Rare"),
                            ("epic", "Epic"),
                            ("legendary", "Legendary"),
                        ],
                        default="common",
                        help_text="Achievement rarity level",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this achievement is currently available",
                    ),
                ),
                (
                    "is_hidden",
                    models.BooleanField(
                        default=False, help_text="Hidden until user meets requirements"
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(default=0, help_text="Display order"),
                ),
                (
                    "available_from",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this achievement becomes available",
                        null=True,
                    ),
                ),
                (
                    "available_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this achievement expires (null = permanent)",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "achievements",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="CreditTransaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        help_text="Amount of credits (positive for earning, negative for spending)"
                    ),
                ),
                (
                    "balance_after",
                    models.IntegerField(
                        help_text="User's credit balance after this transaction"
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("earned_ad", "Earned from Advertisement"),
                            ("earned_achievement", "Earned from Achievement"),
                            ("earned_challenge", "Earned from Daily Challenge"),
                            ("earned_completion", "Earned from Template Completion"),
                            ("earned_rating", "Earned from Template Rating"),
                            ("earned_referral", "Earned from Referral"),
                            ("spent_ai", "Spent on AI Features"),
                            ("spent_premium", "Spent on Premium Features"),
                            ("spent_template", "Spent on Premium Template"),
                            ("bonus", "Bonus Credits"),
                            ("refund", "Refund"),
                            ("admin_adjustment", "Admin Adjustment"),
                        ],
                        help_text="Type of transaction",
                        max_length=50,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="Human-readable description of transaction",
                        max_length=200,
                    ),
                ),
                (
                    "related_object_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of related object (achievement, template, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "related_object_id",
                    models.CharField(
                        blank=True, help_text="ID of related object", max_length=100
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional transaction metadata",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "credit_transactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="DailyChallenge",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "challenge_type",
                    models.CharField(
                        help_text="Type of challenge (complete_templates, use_ai_assistant, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "target_value",
                    models.IntegerField(help_text="Target value to complete challenge"),
                ),
                (
                    "credits_reward",
                    models.IntegerField(
                        default=50,
                        help_text="Credits awarded for completion",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "experience_reward",
                    models.IntegerField(
                        default=25,
                        help_text="Experience points awarded",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("date", models.DateField(help_text="Date this challenge is active")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this challenge is active"
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                            ("expert", "Expert"),
                        ],
                        default="easy",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "daily_challenges",
            },
        ),
        migrations.CreateModel(
            name="UserAchievement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "progress_value",
                    models.IntegerField(
                        default=0, help_text="Current progress towards achievement"
                    ),
                ),
                (
                    "is_unlocked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user has unlocked this achievement",
                    ),
                ),
                (
                    "unlocked_at",
                    models.DateTimeField(
                        blank=True, help_text="When achievement was unlocked", null=True
                    ),
                ),
                (
                    "is_claimed",
                    models.BooleanField(
                        default=False, help_text="Whether user has claimed the reward"
                    ),
                ),
                (
                    "claimed_at",
                    models.DateTimeField(
                        blank=True, help_text="When reward was claimed", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "user_achievements",
            },
        ),
        migrations.CreateModel(
            name="UserLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level",
                    models.PositiveIntegerField(help_text="Level number", unique=True),
                ),
                (
                    "name",
                    models.CharField(help_text="Level name/title", max_length=100),
                ),
                (
                    "experience_required",
                    models.IntegerField(
                        help_text="Total experience points required to reach this level"
                    ),
                ),
                (
                    "credits_reward",
                    models.IntegerField(
                        default=0, help_text="Credits awarded when reaching this level"
                    ),
                ),
                (
                    "title_reward",
                    models.CharField(
                        blank=True,
                        help_text="Special title awarded at this level",
                        max_length=100,
                    ),
                ),
                (
                    "max_templates",
                    models.IntegerField(
                        default=10,
                        help_text="Maximum templates user can create at this level",
                    ),
                ),
                (
                    "ai_requests_per_day",
                    models.IntegerField(
                        default=5, help_text="AI requests allowed per day at this level"
                    ),
                ),
                (
                    "can_create_premium",
                    models.BooleanField(
                        default=False, help_text="Can create premium templates"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "user_levels",
                "ordering": ["level"],
            },
        ),
        migrations.CreateModel(
            name="UserDailyChallenge",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "progress_value",
                    models.IntegerField(
                        default=0,
                        help_text="Current progress towards challenge completion",
                    ),
                ),
                (
                    "is_completed",
                    models.BooleanField(
                        default=False, help_text="Whether challenge is completed"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When challenge was completed", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_progress",
                        to="gamification.dailychallenge",
                    ),
                ),
            ],
            options={
                "db_table": "user_daily_challenges",
            },
        ),
    ]
