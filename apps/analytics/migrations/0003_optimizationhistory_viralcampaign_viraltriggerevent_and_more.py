# Generated by Django 4.2.10 on 2025-08-19 18:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("analytics", "0002_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="OptimizationHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "original_prompt",
                    models.TextField(help_text="Original prompt before optimization"),
                ),
                ("optimized_prompt", models.TextField(help_text="AI-optimized prompt")),
                (
                    "wow_factor_score",
                    models.FloatField(
                        help_text="Wow factor score (0-10)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "improvement_percentage",
                    models.FloatField(
                        default=0,
                        help_text="Percentage improvement from original",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("ai_model_used", models.CharField(blank=True, max_length=100)),
                ("processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("tokens_used", models.IntegerField(default=0)),
                (
                    "viral_score",
                    models.IntegerField(
                        default=0, help_text="Calculated viral potential score"
                    ),
                ),
                ("shared_count", models.IntegerField(default=0)),
                (
                    "optimization_type",
                    models.CharField(
                        choices=[
                            ("general", "General Improvement"),
                            ("clarity", "Clarity Enhancement"),
                            ("specificity", "Specificity Boost"),
                            ("creativity", "Creativity Enhancement"),
                            ("professional", "Professional Tone"),
                            ("technical", "Technical Precision"),
                        ],
                        default="general",
                        max_length=50,
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="optimizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "optimization_history",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ViralCampaign",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "target_triggers",
                    models.JSONField(
                        default=list,
                        help_text="List of viral triggers this campaign responds to",
                    ),
                ),
                (
                    "content_templates",
                    models.JSONField(
                        default=dict, help_text="Platform-specific content templates"
                    ),
                ),
                ("target_audience", models.JSONField(blank=True, default=dict)),
                ("exclusion_criteria", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("max_triggers_per_user", models.IntegerField(default=5)),
                ("cooldown_hours", models.IntegerField(default=24)),
                ("total_triggers", models.IntegerField(default=0)),
                ("total_shares", models.IntegerField(default=0)),
                ("total_conversions", models.IntegerField(default=0)),
                ("estimated_reach", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "viral_campaigns",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ViralTriggerEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("optimization_complete", "Optimization Complete"),
                            ("daily_streak", "Daily Streak"),
                            ("level_up", "Level Up"),
                            ("milestone_reached", "Milestone Reached"),
                            ("first_optimization", "First Optimization"),
                            ("high_engagement", "High Engagement"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "trigger_type",
                    models.CharField(
                        choices=[
                            ("high_wow_score", "High WOW Score"),
                            ("optimization_count", "Optimization Count"),
                            ("streak_achievement", "Streak Achievement"),
                            ("level_up", "Level Up"),
                            ("first_optimization", "First Optimization"),
                        ],
                        max_length=50,
                    ),
                ),
                ("event_data", models.JSONField(default=dict)),
                ("viral_score", models.IntegerField(default=0)),
                (
                    "threshold_met",
                    models.FloatField(help_text="The threshold value that was met"),
                ),
                ("action_triggered", models.CharField(blank=True, max_length=50)),
                ("notification_sent", models.BooleanField(default=False)),
                ("user_responded", models.BooleanField(default=False)),
                (
                    "response_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("shared", "User Shared"),
                            ("dismissed", "User Dismissed"),
                            ("ignored", "User Ignored"),
                            ("clicked", "User Clicked"),
                        ],
                        max_length=50,
                    ),
                ),
                ("delay_minutes", models.IntegerField(default=0)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="viral_events",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "viral_trigger_events",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "event_type", "-created_at"],
                        name="viral_trigg_user_id_3f74ae_idx",
                    ),
                    models.Index(
                        fields=["trigger_type", "-created_at"],
                        name="viral_trigg_trigger_b5ccc6_idx",
                    ),
                    models.Index(
                        fields=["notification_sent", "user_responded"],
                        name="viral_trigg_notific_f5f19a_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ViralShare",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "platform",
                    models.CharField(
                        choices=[
                            ("twitter", "Twitter"),
                            ("linkedin", "LinkedIn"),
                            ("facebook", "Facebook"),
                            ("copy", "Copy Link"),
                            ("email", "Email"),
                            ("whatsapp", "WhatsApp"),
                            ("telegram", "Telegram"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("high_wow_result", "High WOW Result"),
                            ("milestone_achievement", "Milestone Achievement"),
                            ("streak_celebration", "Streak Celebration"),
                            ("level_up", "Level Up"),
                            ("first_success", "First Success"),
                            ("viral_notification", "Viral Notification"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "shared_content",
                    models.TextField(help_text="Actual content that was shared"),
                ),
                ("referral_code", models.CharField(blank=True, max_length=50)),
                ("clicked_count", models.IntegerField(default=0)),
                ("conversion_count", models.IntegerField(default=0)),
                ("estimated_reach", models.IntegerField(default=0)),
                ("share_metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "optimization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shares",
                        to="analytics.optimizationhistory",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="viral_shares",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "viral_shares",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "-created_at"],
                        name="viral_share_user_id_3a0ffd_idx",
                    ),
                    models.Index(
                        fields=["platform", "-created_at"],
                        name="viral_share_platfor_cd8add_idx",
                    ),
                    models.Index(
                        fields=["content_type", "-created_at"],
                        name="viral_share_content_1b9dcc_idx",
                    ),
                    models.Index(
                        fields=["referral_code"], name="viral_share_referra_6bc405_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="optimizationhistory",
            index=models.Index(
                fields=["user", "-created_at"], name="optimizatio_user_id_42c10c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationhistory",
            index=models.Index(
                fields=["wow_factor_score", "-created_at"],
                name="optimizatio_wow_fac_ac9702_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="optimizationhistory",
            index=models.Index(
                fields=["viral_score", "-created_at"],
                name="optimizatio_viral_s_45bb30_idx",
            ),
        ),
    ]
