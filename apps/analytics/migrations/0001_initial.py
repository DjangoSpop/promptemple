# Generated by Django 4.2.10 on 2025-06-20 13:02

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ABTestAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("variant", models.CharField(max_length=50)),
                ("assigned_at", models.DateTimeField(auto_now_add=True)),
                ("converted", models.BooleanField(default=False)),
                ("conversion_value", models.FloatField(blank=True, null=True)),
                ("events_data", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "db_table": "ab_test_assignments",
            },
        ),
        migrations.CreateModel(
            name="ABTestExperiment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField()),
                ("variants", models.JSONField(default=list)),
                ("traffic_allocation", models.JSONField(default=dict)),
                ("target_audience", models.JSONField(blank=True, default=dict)),
                ("exclusion_criteria", models.JSONField(blank=True, default=dict)),
                ("is_active", models.BooleanField(default=False)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("primary_metric", models.CharField(max_length=100)),
                ("secondary_metrics", models.JSONField(blank=True, default=list)),
                ("statistical_significance", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "ab_test_experiments",
            },
        ),
        migrations.CreateModel(
            name="AIPromptTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("prompt_template", models.TextField()),
                ("default_parameters", models.JSONField(default=dict)),
                ("parameter_schema", models.JSONField(default=dict)),
                ("usage_count", models.IntegerField(default=0)),
                ("average_rating", models.FloatField(default=0.0)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "ai_prompt_templates",
            },
        ),
        migrations.CreateModel(
            name="AppConfiguration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key", models.CharField(max_length=100, unique=True)),
                ("value", models.TextField()),
                (
                    "data_type",
                    models.CharField(
                        choices=[
                            ("string", "String"),
                            ("integer", "Integer"),
                            ("float", "Float"),
                            ("boolean", "Boolean"),
                            ("json", "JSON"),
                        ],
                        default="string",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("is_public", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "app_configurations",
            },
        ),
        migrations.CreateModel(
            name="Badge",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField()),
                ("icon", models.CharField(max_length=50)),
                ("color", models.CharField(default="#6366F1", max_length=7)),
                (
                    "rarity",
                    models.CharField(
                        choices=[
                            ("common", "Common"),
                            ("uncommon", "Uncommon"),
                            ("rare", "Rare"),
                            ("epic", "Epic"),
                            ("legendary", "Legendary"),
                            ("mythic", "Mythic"),
                        ],
                        default="common",
                        max_length=20,
                    ),
                ),
                ("category", models.CharField(blank=True, max_length=50)),
                ("unlock_criteria", models.JSONField(default=dict)),
                ("is_secret", models.BooleanField(default=False)),
                ("sort_order", models.IntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "badges",
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Leaderboard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "leaderboard_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("all_time", "All Time"),
                            ("seasonal", "Seasonal"),
                        ],
                        max_length=20,
                    ),
                ),
                ("metric_name", models.CharField(max_length=100)),
                ("metric_display_name", models.CharField(max_length=100)),
                ("max_entries", models.IntegerField(default=100)),
                ("is_public", models.BooleanField(default=True)),
                ("is_active", models.BooleanField(default=True)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "leaderboards",
            },
        ),
        migrations.CreateModel(
            name="LeaderboardEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rank", models.IntegerField()),
                ("score", models.FloatField()),
                ("previous_rank", models.IntegerField(blank=True, null=True)),
                ("additional_data", models.JSONField(blank=True, default=dict)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "leaderboard_entries",
                "ordering": ["rank"],
            },
        ),
        migrations.CreateModel(
            name="MLModelPrediction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_name", models.CharField(max_length=100)),
                ("model_version", models.CharField(max_length=50)),
                ("input_data", models.JSONField()),
                ("prediction", models.JSONField()),
                (
                    "confidence_score",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ]
                    ),
                ),
                ("related_object_type", models.CharField(blank=True, max_length=50)),
                ("related_object_id", models.CharField(blank=True, max_length=100)),
                ("actual_outcome", models.JSONField(blank=True, null=True)),
                ("feedback_score", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "ml_model_predictions",
            },
        ),
        migrations.CreateModel(
            name="StreakTracker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "streak_type",
                    models.CharField(
                        choices=[
                            ("daily_login", "Daily Login"),
                            ("template_creation", "Template Creation"),
                            ("ai_usage", "AI Usage"),
                            ("achievement_unlock", "Achievement Unlock"),
                        ],
                        max_length=50,
                    ),
                ),
                ("current_streak", models.IntegerField(default=0)),
                ("best_streak", models.IntegerField(default=0)),
                ("last_activity_date", models.DateField()),
                (
                    "milestone_rewards_claimed",
                    models.JSONField(blank=True, default=list),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "streak_trackers",
            },
        ),
        migrations.CreateModel(
            name="SystemNotification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("info", "Information"),
                            ("warning", "Warning"),
                            ("success", "Success"),
                            ("error", "Error"),
                            ("maintenance", "Maintenance"),
                            ("feature", "New Feature"),
                            ("promotion", "Promotion"),
                        ],
                        max_length=20,
                    ),
                ),
                ("target_all_users", models.BooleanField(default=True)),
                ("target_user_groups", models.JSONField(blank=True, default=list)),
                ("target_platforms", models.JSONField(blank=True, default=list)),
                ("is_dismissible", models.BooleanField(default=True)),
                (
                    "auto_dismiss_after_seconds",
                    models.IntegerField(blank=True, null=True),
                ),
                ("show_on_pages", models.JSONField(blank=True, default=list)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("view_count", models.IntegerField(default=0)),
                ("click_count", models.IntegerField(default=0)),
                ("dismiss_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "system_notifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TemplateCollaborationRequest",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("message", models.TextField(blank=True)),
                ("permissions", models.JSONField(default=list)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("declined", "Declined"),
                            ("expired", "Expired"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("expires_at", models.DateTimeField()),
                ("responded_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "template_collaboration_requests",
            },
        ),
        migrations.CreateModel(
            name="TemplateFork",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("fork_reason", models.TextField(blank=True)),
                ("changes_summary", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "template_forks",
            },
        ),
        migrations.CreateModel(
            name="TemplateReport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("inappropriate_content", "Inappropriate Content"),
                            ("spam", "Spam"),
                            ("copyright_violation", "Copyright Violation"),
                            ("misleading", "Misleading"),
                            ("low_quality", "Low Quality"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("reviewing", "Under Review"),
                            ("resolved", "Resolved"),
                            ("dismissed", "Dismissed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("reviewed_at", models.DateTimeField(blank=True, null=True)),
                ("resolution_notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "template_reports",
            },
        ),
        migrations.CreateModel(
            name="UserBadge",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("earned_at", models.DateTimeField(auto_now_add=True)),
                ("showcase", models.BooleanField(default=False)),
                ("earned_for", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "db_table": "user_badges",
            },
        ),
        migrations.CreateModel(
            name="UserNotificationStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_viewed", models.BooleanField(default=False)),
                ("is_clicked", models.BooleanField(default=False)),
                ("is_dismissed", models.BooleanField(default=False)),
                ("viewed_at", models.DateTimeField(blank=True, null=True)),
                ("clicked_at", models.DateTimeField(blank=True, null=True)),
                ("dismissed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "notification",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_statuses",
                        to="analytics.systemnotification",
                    ),
                ),
            ],
            options={
                "db_table": "user_notification_statuses",
            },
        ),
    ]
